[{"path":"https://systems-methods.github.io/consensusNetR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Mike Mason Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Mason. Author, maintainer. Jimmy Fulp. Author. Thomas Corey. Author. Alexandre Alloy. Author.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mason M, Fulp J, Corey T, Alloy (2023). consensusNetR: R Package combining networks consensus network. R package version 0.0.1, https://github.com/Systems-Methods/consensusNetR.","code":"@Manual{,   title = {consensusNetR: R Package for combining networks into a consensus network},   author = {Mike Mason and Jimmy Fulp and Thomas Corey and Alexandre Alloy},   year = {2023},   note = {R package version 0.0.1},   url = {https://github.com/Systems-Methods/consensusNetR}, }"},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"consensusnetr","dir":"","previous_headings":"","what":"R Package for combining networks into a consensus network","title":"R Package for combining networks into a consensus network","text":"consensusNetR R Package combining networks consensus network based work Laura Cantini Andrei Zinovyev. addition identifying consensus based correlation community meta-genes (loadings membership scores), also implement methods based overlap.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package for combining networks into a consensus network","text":"Install version BMS BioGit : :","code":"remotes::install_github(   repo = \"Systems-Methods/consensusNetR\" ) remotes::install_git(   \"https://github.com/Systems-Methods/consensusNetR\" )"},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"R Package for combining networks into a consensus network","text":"example create consensus network three public datasets: GSE39582, TCGA COAD, TCGA READ example workflow begins icWGCNA results, however alternative methods work well (KNN, PCA, ICA, WGCNA). See Example Appendix downloading data icWGCNA run details code.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"consensus-construction","dir":"","previous_headings":"","what":"Consensus construction","title":"R Package for combining networks into a consensus network","text":"Reciprocal Best Hits Heatmap","code":"# Create list of community_membership object memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership )  # Construct Meta Reciprocal Best Hits based on overlaps (318 communities found) rbh <- construct_rbh_overlap_based(memb_list, top_n = 25) nrow(rbh) ## 318  # RBH Heatmap Creation plot_rbh(rbh = rbh, network_membership_list = memb_list) # Detect Communities in Adjacency/Reciprocal Best Hits Matrix consensus_comms <- detect_consensus_communities(rbh) # showing the first 10 communities  #note community 1 is a miscellaneous and will be removed table(consensus_comms$Cluster)[1:10] ##    1   2   3   4   5   6   7   8   9  10  ##  200   3   3   3   3   3   3   3   3   3   # Compute the average metagene across studies for each community consensus_memb <- calc_consensus_memberships(consensus_comms, memb_list)"},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"downstream-analysis","dir":"","previous_headings":"","what":"Downstream Analysis","title":"R Package for combining networks into a consensus network","text":"Individual Eigengene Distributions","code":"consensus_genes <- get_gene_community_membership(consensus_comms, memb_list, 2) head(consensus_genes) ##    gene_id cluster n_studies ##  1    A1BG      43         2 ##  2     A2M       1         2 ##  3    AACS      19         2 ##  4   AAGAB      25         2 ##  5   AASDH      40         2 ##  6    AASS      42         2  # Need to use icWGCNA for individual eigengenes GSE39582_eigen <- icWGCNA::compute_eigengene_matrix(   ex = GSE39582_df,   membership_matrix = consensus_memb ) read_eigen <- icWGCNA::compute_eigengene_matrix(   ex = read_df,   membership_matrix = consensus_memb ) coad_eigen <- icWGCNA::compute_eigengene_matrix(   ex = coad_df,   membership_matrix = consensus_memb )  eigen_list <- list(GSE39582_eigen, read_eigen, coad_eigen) plot_consensus_eig_dist(eigen_list)"},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"example-appendix","dir":"","previous_headings":"","what":"Example Appendix","title":"R Package for combining networks into a consensus network","text":"GSE39582 need convert Affymetrix Human Genome U133 Plus 2.0 Array gene symbols, using icWGCNA::gene_mapping() function. matches two TCGA datasets already gene symbols. datasets must consistent annotation (.e. Gene symbols, Entrez, Ensembl, …). example convert GSE39582 gene symbols using icWGCNA::gene_mapping() function. data normalized, however example downloaded normalized data transformations needed . icWGCNA runs using defaults, except reducing max iterations 5 demonstration purposes. runs benefit greatly using multiple computer cores.","code":"library(icWGCNA)  # GSE39582 GSE39582 <- GEOquery::getGEO(\"GSE39582\")  # TCGA READ UCSCXenaTools::getTCGAdata(   project = \"READ\",   mRNASeq = TRUE,   mRNASeqType = \"normalized\",   clinical = TRUE,   download = TRUE,   destdir = \"/MY_PATH/data/\" )  # TCGA COAD UCSCXenaTools::getTCGAdata(   project = \"COAD\",   mRNASeq = TRUE,   mRNASeqType = \"normalized\",   clinical = TRUE,   download = TRUE,   destdir = \"/MY_PATH/data/\" ) # creating annotation file for gene mapping to gene symbols GSE39582_annotation <- GSE39582@featureData@data |>   dplyr::select(ID, gene_symbol = `Gene Symbol`) |>   dplyr::mutate(     gene_symbol = purrr::map(       gene_symbol, ~ stringr::str_split(.x, \" /// \")[[1]]     )   ) %>%   tidyr::unnest(gene_symbol)  GSE39582_hugo <- icWGCNA::gene_mapping(   GSE39582@assayData$exprs,   GSE39582_annotation,   compress_fun = \"highest_mean\",   compress_trans = \"log_exp\" ) # GSE39582 GSE39582_icwgcna <- icWGCNA::icwgcna(GSE39582_hugo, maxIt = 5)  # TCGA READ read_icwgcna <- icWGCNA::icwgcna(read_df, maxIt = 5)  # TCGA COAD coad_icwgcna <- icWGCNA::icwgcna(coad_df, maxIt = 5)"},{"path":"https://systems-methods.github.io/consensusNetR/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"R Package for combining networks into a consensus network","text":"Please note icWGCNA project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_consensus_memberships.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the average metagene across studies for each community — calc_consensus_memberships","title":"Compute the average metagene across studies for each community — calc_consensus_memberships","text":"Compute average metagene across studies community","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_consensus_memberships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the average metagene across studies for each community — calc_consensus_memberships","text":"","code":"calc_consensus_memberships(   consensus_comms,   network_membership_list,   weights = NULL,   gene_cohort_N = 3,   compressIntra = c(\"first\", \"mean\"),   remove_misc_comm = TRUE,   comm_prefix = \"mA\" )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_consensus_memberships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the average metagene across studies for each community — calc_consensus_memberships","text":"consensus_comms communities output MCL::mcl(), list containing elements Cluster vector cluster associated index. network_membership_list list containing community membership scores network. rownames contain unique gene ids column names community names weights weights weighted average based study attributes gene_cohort_N number studies gene must present included compressIntra indicates deal multiple metagenes belonging community within one study-level network remove_misc_comm miscellaneous community removed (1st community) comm_prefix prefix add community names","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_consensus_memberships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the average metagene across studies for each community — calc_consensus_memberships","text":"matrix average loadings (metagenes) across studies included network_membership_list","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_consensus_memberships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the average metagene across studies for each community — calc_consensus_memberships","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_correlation_based(   memb_list,   upper_quant = .99,   lower_quant = .05,   max_rank = 2 ) consensus_comms <- detect_consensus_communities(ma) consensus_memb <- calc_consensus_memberships(consensus_comms, memb_list) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_cor_of_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing cor of cor between study expression data — calc_cor_of_cor","title":"Computing cor of cor between study expression data — calc_cor_of_cor","text":"Computing cor cor study expression data","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_cor_of_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing cor of cor between study expression data — calc_cor_of_cor","text":"","code":"calc_cor_of_cor(ex_list)"},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_cor_of_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing cor of cor between study expression data — calc_cor_of_cor","text":"ex_list list expression datasets","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_cor_of_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing cor of cor between study expression data — calc_cor_of_cor","text":"correlations correlations","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/calc_cor_of_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing cor of cor between study expression data — calc_cor_of_cor","text":"","code":"if (FALSE) { ex_list <- list(   GSE39582 = GSE39582_df,   READ = read_df,   COAD = coad_df )  calc_cor_of_cor(ex_list) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/compare_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"compare_networks — compare_networks","title":"compare_networks — compare_networks","text":"compare_networks","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/compare_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare_networks — compare_networks","text":"","code":"compare_networks(   net_membership_1,   net_membership_2,   K = 75,   memb_cut = 0.5,   na_flag = c(\"none\", \"both\", \"either\") )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/compare_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare_networks — compare_networks","text":"net_membership_1 net_membership_1 net_membership_2 net_membership_2 K K memb_cut memb_cut na_flag na_flag","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/compare_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare_networks — compare_networks","text":"data.frame: adjRand, cor_of_cor, cor_coph, overlap","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/compare_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compare_networks — compare_networks","text":"","code":"if (FALSE) { compare_networks(   GSE39582_icwgcna$community_membership,   read_icwgcna$community_membership ) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"Computes single network two datasets. must rownames containing sort common geneID vocabulary, can intersected get common rows.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"","code":"construct_2study_rbh_correlation_based(   net_membership_1,   net_membership_2,   lower_quant = 0,   upper_quant = 1,   max_rank = 1,   abs = FALSE,   sparse = FALSE,   method = \"pearson\" )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"net_membership_1 community membership matrix first network. net_membership_2 community membership matrix second network. lower_quant indicates quantile minimum correlation reciprocal best hits find. upper_quant indicates quantile correlations metagene pairing considered \"hit.\" max_rank represents highest column row rankings accepted reciprocal best hits network. Pure reciprocal best hits uses max_rank 1. abs logical, take absolute values correlations? sparse logical, use sparse matrix store network? method string, stats::cor()","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"Matrix rows matching columns net_membership_1 columns matching columns net_membership_2, values 1 indicating two metagenes hit, 0 indicating .","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"one wants reciprocal best hits network separate dimension names rows columns, column names net_membership_1 net_membership_2 distinct.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_correlation_based.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute correlation based RBH for Two Metagene Datasets — construct_2study_rbh_correlation_based","text":"","code":"if (FALSE) { rbh <- construct_2study_rbh_correlation_based(   GSE39582_icwgcna$community_membership,   read_icwgcna$community_membership ) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_overlap_based.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","title":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","text":"Compute RBH (reciprocal best hits) Two Networks based Overlap top community genes. must row names containing sort common geneID vocabulary, can intersected get common rows.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_overlap_based.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","text":"","code":"construct_2study_rbh_overlap_based(   net_membership_1,   net_membership_2,   top_n = 50,   memb_cut = 0 )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_overlap_based.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","text":"net_membership_1 community membership matrix first network. net_membership_2 community membership matrix second network. top_n number top genes based membership scores higher scores indicating stronger membership community memb_cut membership threshold stricter thresholding. genes membership score greater threshold used","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_overlap_based.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","text":"Matrix rows matching columns net_membership_1 columns matching columns net_membership_2, values 1 indicating two metagenes hit, 0 indicating .","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_2study_rbh_overlap_based.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute RBH (reciprocal best hits) for Two Networks based on Overlap of top genes — construct_2study_rbh_overlap_based","text":"","code":"if (FALSE) { rbh <- construct_2study_rbh_overlap_based(   GSE39582_icwgcna$community_membership,   read_icwgcna$community_membership ) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_correlation_based.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","title":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","text":"Iterate list membership matrices construct pairwise networks every combination, output symmetric matrix labeled dimensions. can interpreted \"adjacency\" matrix different metagenes across datasets file list. dimension names take original dimension names concatenate unique file names, dimension names guaranteed unique.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_correlation_based.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","text":"","code":"construct_rbh_correlation_based(   network_membership_list,   lower_quant = 0,   upper_quant = 1,   max_rank = 1,   abs = FALSE,   sparse = FALSE,   method = \"pearson\",   binary = FALSE )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_correlation_based.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","text":"network_membership_list list containing community membership scores network. rownames contain unique gene ids column names community names lower_quant indicates quantile minimum correlation reciprocal best hits find. upper_quant indicates quantile correlations metagene pairing considered \"hit.\" max_rank represents highest column row rankings accepted reciprocal best hits network. Pure reciprocal best hits uses max_rank 1. abs logical, take absolute values correlations? sparse logical, use sparse matrix store network? method string, stats::cor() binary logical, indicates whether meta residual best hits matrix show correlations simply binary (.numeric(correlation > 0)) output","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_correlation_based.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","text":"reciprocal best hits matrix metagenes across datasets specified files, dimensions named uniquely based file column names well file names (ensure uniqueness).","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_correlation_based.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Meta Reciprocal Best Hits based on correlations — construct_rbh_correlation_based","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_correlation_based(   memb_list,   upper_quant = .99,   lower_quant = .05,   max_rank = 2 ) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_overlap_based.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Meta Reciprocal Best Hits based on overlaps — construct_rbh_overlap_based","title":"Construct Meta Reciprocal Best Hits based on overlaps — construct_rbh_overlap_based","text":"Iterate list containing membership matrices construct pairwise networks every combination, output symmetric matrix labeled dimensions. can interpreted \"adjacency\" matrix different metagenes across networks input list. column/row names take networks communities' names concatenate network list names, dimension names guaranteed unique.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_overlap_based.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Meta Reciprocal Best Hits based on overlaps — construct_rbh_overlap_based","text":"","code":"construct_rbh_overlap_based(network_membership_list, top_n = 50, memb_cut = 0)"},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_overlap_based.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Meta Reciprocal Best Hits based on overlaps — construct_rbh_overlap_based","text":"network_membership_list list containing community membership scores network. rownames contain unique gene ids column names community names top_n number top genes based membership scores higher scores indicating stronger membership community memb_cut membership threshold stricter thresholding. genes membership score greater threshold used","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/construct_rbh_overlap_based.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Meta Reciprocal Best Hits based on overlaps — construct_rbh_overlap_based","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_overlap_based(memb_list) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"Performs Markov Clustering adjacency matrix, giving cluster/community number metagene associated , renamed clusters order size (1 largest)","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"","code":"detect_consensus_communities(rbh, expansion = 2)"},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"rbh adjacency/reciprocal best hits matrix, output construct_rbh_correlation_based() expansion numeric value > 1 expansion parameter","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"output MCL::mcl(), renamed clusters order size (1 largest)","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"See MCL::mcl() detail","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/detect_consensus_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Communities in Adjacency/Reciprocal Best Hits Matrix — detect_consensus_communities","text":"","code":"if (FALSE) { # Create list of community_membership object memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_correlation_based(   memb_list,   upper_quant = .99,   lower_quant = .05,   max_rank = 2 ) consensus_comms <- detect_consensus_communities(ma) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/get_gene_community_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","title":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","text":"Get Consensus Membership Genes Metagene Communities","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/get_gene_community_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","text":"","code":"get_gene_community_membership(   consensus_comms,   network_membership_list,   min_studies = 2,   include_nonmembers = FALSE,   compress = TRUE,   rank_based = TRUE )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/get_gene_community_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","text":"consensus_comms communities output MCL::mcl(), list containing elements Cluster vector cluster associated index. network_membership_list list containing community membership scores network. rownames contain unique gene ids column names community names min_studies minimum threshold studies/datasets indicating gene belongs community. given dataset, gene \"belongs\" community gene's highest loading corresponds community. include_nonmembers include_nonmembers appear community. compress indicates whether drop duplicate community metagenes. Assumes first one one keep (largest best). Currently TRUE supported rank_based flag indicating whether use rank determing max metagene. Currently TRUE supported","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/get_gene_community_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","text":"data.frame containing gene ids associated likely cluster(s) $cluster $n_studies, representing number studies datasets indicating gene belongs associated community. given dataset, gene \"belongs\" community gene's highest loading corresponds community.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/get_gene_community_membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Consensus Membership of Genes in Metagene Communities — get_gene_community_membership","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_correlation_based(   memb_list,   upper_quant = .99,   lower_quant = .05,   max_rank = 2 ) consensus_comms <- detect_consensus_communities(ma) consensus_genes <- get_gene_community_membership(consensus_comms, memb_list, 2) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot individual eigengene distributions — plot_consensus_eig_dist","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"Plot individual eigengene distributions","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"","code":"plot_consensus_eig_dist(   eigen_list,   target_study_index = 1,   filename = NA,   device = \"png\",   width = 12,   height = 10,   dpi = 1000 )"},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"eigen_list list community signatures (eigengenes) studies, using output calc_consensus_memberships() membership_matrix. target_study_index study want normalized eigengenes displaying distributions. likely largest/best quality study filename File name device Device use. Can either device function (e.g. png), one \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" \"wmf\" (windows ). width Plot width units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. height Plot height units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. dpi Plot resolution. Also accepts string input: \"retina\" (320), \"print\" (300), \"screen\" (72). Applies raster output types.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"eigengene distributions filename na, saved figure filename provided","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"icWGCNA eigen_list created using icWGCNA::compute_eigengene_matrix() study combining outputs list.","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_consensus_eig_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot individual eigengene distributions — plot_consensus_eig_dist","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_correlation_based(   memb_list,   upper_quant = .99,   lower_quant = .05,   max_rank = 2 ) consensus_comms <- detect_consensus_communities(ma) consensus_memb <- calc_consensus_memberships(consensus_comms, memb_list,   gene_cohort_N = 2 )  # Need to use icWGCNA for individual eigengenes GSE39582_eigen <- icWGCNA::compute_eigengene_matrix(   ex = GSE39582_df,   membership_matrix = consensus_memb ) read_eigen <- icWGCNA::compute_eigengene_matrix(   ex = read_df,   membership_matrix = consensus_memb ) coad_eigen <- icWGCNA::compute_eigengene_matrix(   ex = coad_df,   membership_matrix = consensus_memb ) eigen_list <- list(GSE39582_eigen, read_eigen, coad_eigen)  plot_consensus_eig_dist(eigen_list) }"},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_rbh.html","id":null,"dir":"Reference","previous_headings":"","what":"RBH Heatmap Creation — plot_rbh","title":"RBH Heatmap Creation — plot_rbh","text":"RBH Heatmap Creation","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_rbh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RBH Heatmap Creation — plot_rbh","text":"","code":"plot_rbh(rbh, network_membership_list, file_name = NA, width = 10, height = 8)"},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_rbh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RBH Heatmap Creation — plot_rbh","text":"rbh reciprocal best hits matrix (output construct_rbh_correlation_based() construct_rbh_overlap_based()) network_membership_list list containing community membership scores network. rownames contain unique gene ids column names community names file_name File name width figure width height figure height","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_rbh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RBH Heatmap Creation — plot_rbh","text":"pheatmap object","code":""},{"path":"https://systems-methods.github.io/consensusNetR/reference/plot_rbh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RBH Heatmap Creation — plot_rbh","text":"","code":"if (FALSE) { memb_list <- list(   GSE39582 = GSE39582_icwgcna$community_membership,   READ = read_icwgcna$community_membership,   COAD = coad_icwgcna$community_membership ) ma <- construct_rbh_overlap_based(memb_list) plot_rbh(ma, memb_list) }"},{"path":"https://systems-methods.github.io/consensusNetR/news/index.html","id":"consensusnetr-001","dir":"Changelog","previous_headings":"","what":"consensusNetR 0.0.1","title":"consensusNetR 0.0.1","text":"Initial release","code":""},{"path":"https://systems-methods.github.io/consensusNetR/news/index.html","id":"consensusnetr-0009000","dir":"Changelog","previous_headings":"","what":"consensusNetR 0.0.0.9000","title":"consensusNetR 0.0.0.9000","text":"Developmental release","code":""}]
